{"version":3,"sources":["Assets/Images/Gambar1.jpeg","Assets/Images/Gambar2.jpeg","Assets/Toolbar/Login/Login.js","Assets/Toolbar/Logout/Logout.js","Assets/Toolbar/Tolbar.js","Dashbord/Content/Content.js","Dashbord/Dashbord.js","Dashbord/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Login","react_default","a","createElement","className","logo","src","logologin","alt","type","placeholder","NavLink","to","Component","Logout","Tolbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","login","logout","doesshow","shown","setState","Content","Images1","Dashbord","Content_Content_Content","App","Tolbar_Tolbar","Switch","Route","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b502f0d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Gambar1.ff46e423.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Gambar2.a2a705a7.jpeg\";","import React, { Component } from 'react'\nimport './Login.css';\nimport {NavLink} from 'react-router-dom'\nimport logologin from '../../../Assets/Images/Gambar1.jpeg';\n\nexport default class Login extends Component {\n  render() {\n    return (\n      <div className=\"login\">\n          <div logo=\"logo\">\n              <img src={logologin} alt=\"Gambar3\" />\n          </div>\n          <form className=\"form\">\n          <center>\n            <input type=\"text\" placeholder=\"Enter your Email\" /><br/>\n            <input type=\"text\" placeholder=\"Enter your Password\" /><br/>\n            <button className=\"Button\" ><NavLink to=\"/Dashboard\"> Login</NavLink> </button>\n            </center>\n            </form>\n            <div className=\"daftar\">\n                <p> Anda Belum Punya akun </p>\n                  <a><NavLink to=\"/logout\" > Klik here</NavLink></a>\n            </div>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Logout extends Component {\n  render() {\n    return (\n      <div>\n          <h1> hello i m  a logout page</h1>\n        \n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport  './Tolbar.css';\nimport logo from '../../Assets/Images/Gambar2.jpeg';\nimport {NavLink} from 'react-router-dom'\n\nexport default class Tolbar extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            login: \" \",\n            logout: \" \",\n            doesshow: false\n        }\n    }\n\n    handleDropdownLoginLogout(){\n        const shown = this.state.doesshow\n        this.setState({doesshow: !shown})\n    }\n  \n    render() {\n    return (\n      <div className=\"Tollbar\">\n        <div className= \" Logos\">\n            <img src= {logo} className=\"logo\" />                \n        </div>\n            <div className =\"loginlogout\">\n                <li> <NavLink to=\"/logout\">Logout  </NavLink> </li>\n            </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './Content.css';\nimport Images1 from '../../Assets/Images/Gambar1.jpeg'\n\nexport default class Content extends Component {\n  render() {\n    return (\n      <div>\n           <div className=\"content\"><h4>Product1</h4>\n            <img src={Images1} alt=\"image\" className=\"ImageContent\" />\n                <p> this is my product is very good </p>\n              <button> see more</button>\n          </div>\n          <div className=\"content\"> Content </div>\n          <div className=\"content\"> Content </div>\n          <div className=\"content\"> Content </div>\n        \n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Tolbar from '../Assets/Toolbar/Tolbar';\nimport Content from './Content/Content';\n\nexport default class Dashbord extends Component {\n  render() {\n    return (\n      <div className= \"Dashbord\">\n        <br />\n        <Content />\n        \n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Route,Switch} from 'react-router-dom'\nimport Login from '../Assets/Toolbar/Login/Login';\nimport Logout from '../Assets/Toolbar/Logout/Logout';\nimport Dashbord from './Dashbord';\nimport Tolbar from '../Assets/Toolbar/Tolbar';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Tolbar />\n        <Switch>\n        <Route  path='/Dashboard' component={Dashbord} />\n          <Route exact path='/' component={Login} />\n          <Route path='/logout' component={Logout} />\n        </Switch>\n\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route} from \"react-router-dom\"\nimport './index.css';\nimport App from './Dashbord/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Route path=\"/\" component={App} />\n    </BrowserRouter>,\n document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}